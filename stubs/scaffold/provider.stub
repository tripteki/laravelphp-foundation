<?php

namespace $NAMESPACE$;

use Illuminate\Support\ServiceProvider;
use Illuminate\Database\Eloquent\Factory;

class $CLASS$ extends ServiceProvider
{
    /**
     * @var string $moduleName
     */
    protected $moduleName = "$MODULE$";

    /**
     * @var string $moduleNameLower
     */
    protected $moduleNameLower = "$LOWER_NAME$";

    /**
     * @return void
     */
    public function boot()
    {
        $this->registerTranslations();
        $this->registerConfig();
        $this->registerViews();
        $this->loadMigrationsFrom(module_path($this->moduleName, "$MIGRATIONS_PATH$"));
    }

    /**
     * @return void
     */
    public function register()
    {
        $this->app->register(RouteServiceProvider::class);
    }

    /**
     * @return void
     */
    protected function registerConfig()
    {
        $this->publishes(
        [
            module_path($this->moduleName, "$PATH_CONFIG$/config.php") => config_path($this->moduleNameLower.".php"),

        ], "config");

        $this->mergeConfigFrom(module_path($this->moduleName, "$PATH_CONFIG$/config.php"), $this->moduleNameLower);
    }

    /**
     * @return void
     */
    public function registerViews()
    {
        $viewPath = resource_path("views/modules/".$this->moduleNameLower);
        $sourcePath = module_path($this->moduleName, "$PATH_VIEWS$");

        $this->publishes(
        [
            $sourcePath => $viewPath,

        ], [ "views", $this->moduleNameLower."-module-views", ]);

        $this->loadViewsFrom(array_merge($this->getPublishableViewPaths(), [ $sourcePath, ]), $this->moduleNameLower);
    }

    /**
     * @return void
     */
    public function registerTranslations()
    {
        $langPath = resource_path("lang/modules/".$this->moduleNameLower);

        if (is_dir($langPath)) {

            $this->loadTranslationsFrom($langPath, $this->moduleNameLower);
            $this->loadJsonTranslationsFrom($langPath, $this->moduleNameLower);

        } else {

            $this->loadTranslationsFrom(module_path($this->moduleName, "$PATH_LANG$"), $this->moduleNameLower);
            $this->loadJsonTranslationsFrom(module_path($this->moduleName, "$PATH_LANG$"), $this->moduleNameLower);
        }
    }

    /**
     * @return array
     */
    public function provides()
    {
        return [];
    }

    /**
     * @return array
     */
    private function getPublishableViewPaths(): array
    {
        $paths = [];

        foreach (config("view.paths") as $path) {

            if (is_dir($path."/modules/".$this->moduleNameLower)) {

                $paths[] = $path."/modules/".$this->moduleNameLower;
            }
        }

        return $paths;
    }
}
